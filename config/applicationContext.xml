<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">


	
	<context:component-scan base-package="cn.ts987.oa"></context:component-scan>
	
	<!-- 强制使用CGLIB代理 
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	-->
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 数据库连接信息 -->
				<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/tsoa?characterEncoding=utf-8"></property>
				<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
				<property name="user" value="root"></property>
				<property name="password" value="fgd"></property>
				
				<!-- 其他配置 -->
				<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
				<property name="initialPoolSize" value="3"></property>
				<!--连接池中保留的最小连接数。Default: 3 -->
				<property name="minPoolSize" value="3"></property>
				<!--连接池中保留的最大连接数。Default: 15 -->
				<property name="maxPoolSize" value="5"></property>
				<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
				<property name="acquireIncrement" value="3"></property>
				<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
				<property name="maxStatements" value="8"></property>
				<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
				<property name="maxStatementsPerConnection" value="5"></property>
				<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
				<property name="maxIdleTime" value="1800"></property>
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		
		<!-- 配置c3p0连接池 -->
		<property name="dataSource" ref="dataSource" />
			<!--<bean class="com.mchange.v2.c3p0.ComboPooledDataSource">
				 数据库连接信息 
				<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/tsoa?characterEncoding=utf-8"></property>
				<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
				<property name="user" value="root"></property>
				<property name="password" value="fgd"></property>
				
				 其他配置 
				初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 
				<property name="initialPoolSize" value="3"></property>
				连接池中保留的最小连接数。Default: 3 
				<property name="minPoolSize" value="3"></property>
				连接池中保留的最大连接数。Default: 15 
				<property name="maxPoolSize" value="5"></property>
				当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 
				<property name="acquireIncrement" value="3"></property>
				 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 
				<property name="maxStatements" value="8"></property>
				maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 
				<property name="maxStatementsPerConnection" value="5"></property>
				最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 
				<property name="maxIdleTime" value="1800"></property>
			</bean>
		</property>-->
	</bean>

	<!-- 配置声明式事务管理 -->
	<!-- 
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager"/>
	 -->
	
	<bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"/>  
    </bean>  
    <tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<!-- 创建一个流程引擎的配置对象你不用管这个是什么意思 这个是死的这就是配置这个就是所谓activiti的引擎 现在你已经制造他了 -->  
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">  
        <!--这里是数据源的指定 指向你自己的dataSource -->  
        <property name="dataSource" ref="dataSource" />  
        <property name="transactionManager" ref="transactionManager" />  
        <!-- 设置数据库schema的更新方式 -->  
        <property name="databaseSchemaUpdate" value="true" />  
        <!-- 是否启动jobExecutor -->  
        <property name="jobExecutorActivate" value="false" />  
  
        <!-- 自动部署就是自己自动部署流程 意思就是 我本来没流程啊 怎么多出来的流程 就是在这里 自动部署的，流程只有部署了 用户才可以走这个流程 -->  
        <property name="deploymentResources">  
            <list>  
                <value>classpath*:/deployments/*</value>  
            </list>  
        </property>  
        <!-- 自定义表单字段类型 这个很重要 很重要 你不用明白他是什么意思 他就是必须的 自己在自己的项目里加上这个类然后指向他 -->  
        <property name="customFormTypes">  
            <list>  
                <bean class="com.activi.UserFormType" />  
            </list>  
        </property>  
    </bean>  
  
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">  
        <property name="processEngineConfiguration" ref="processEngineConfiguration" />  
    </bean>  
      
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>  
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>  
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>  
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>  
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>  
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>  
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>  
    
    
    
    
    
    
    
    <!-- 配置ProcessEngine（整合JBPM4.4）--> 
    <!--  
	<bean id="springHelper" class="org.jbpm.pvm.internal.processengine.SpringHelper">
		
		<property name="jbpmCfg" value="jbpm.cfg.xml"></property>
	</bean>
	<bean id="processEngine" factory-bean="springHelper" factory-method="createProcessEngine" />
    -->
	
</beans>